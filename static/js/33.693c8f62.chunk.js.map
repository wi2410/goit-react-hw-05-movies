{"version":3,"file":"static/js/33.693c8f62.chunk.js","mappings":"4PAGaA,EAAiBC,EAAAA,EAAAA,QAAH,6EAIdC,EAAOD,EAAAA,EAAAA,KAAH,0CAIJE,GAAWF,EAAAA,EAAAA,GAAOG,EAAAA,GAAPH,CAAH,4dAsBRI,EAAUJ,EAAAA,EAAAA,IAAH,2C,SCiCpB,EA5DqB,WAAO,IAAD,YACzB,GAA0BK,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MAEXC,EAAS,GACXN,GACFA,EAAMO,OAAOC,KAAI,SAAAC,GAAK,OAAIH,EAAOI,KAAKD,EAAME,KAAtB,KAGxBC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAWX,GAASY,MAAK,SAAAR,GAAM,OAAIL,EAASK,EAAb,GAChC,GAAE,CAACJ,IAEJ,IAAMa,EAAY,oBAAGX,EAASY,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,WAC7C,OACE,UAACtB,EAAD,YACE,SAACC,EAAD,CAAUsB,GAAIH,EAAd,qBACCf,IACC,4BACE,UAACP,EAAD,YACE,gBACE0B,IAAG,0CAAqCnB,EAAMoB,aAC9CC,IAAKrB,EAAMsB,kBAEb,UAACxB,EAAD,YACE,wBAAKE,EAAMsB,kBACX,wCAAgBtB,EAAMuB,aAAaC,QAAQ,OAC3C,uCACA,uBAAIxB,EAAMyB,YACV,oCACA,uBAAInB,EAAOoB,KAAK,eAGpB,oDACA,2BACE,yBACE,SAAC,KAAD,CACER,GAAG,OACHF,MAAO,CAAEC,KAAI,oBAAEb,EAASY,aAAX,aAAE,EAAgBC,YAAlB,QAA0B,WAFzC,qBAOF,yBACE,UAAC,KAAD,CACEC,GAAG,UACHF,MAAO,CAAEC,KAAI,oBAAEb,EAASY,aAAX,aAAE,EAAgBC,YAAlB,QAA0B,WAFzC,oBAIU,aAKd,SAAC,KAAD,SAKT,C","sources":["pages/MovieDetails/MovieDetails.styled.js","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { NavLink } from 'react-router-dom';\n\nexport const DetailsWrapper = styled.section`\n  display: grid;\n  grid-template-columns: 1fr 4fr;\n`;\nexport const Main = styled.main`\n  padding: 24px;\n`;\n\nexport const BackLink = styled(NavLink)`\n  display: inline-block;\n  width: 62px;\n  height: 16px;\n  border: 0;\n  border-radius: 10px;\n  background-size: 40%;\n  background-color: blue;\n  color: white;\n  text-decoration: none;\n  background-repeat: no-repeat;\n  background-position: center;\n  padding: 8px 10px;\n  margin-bottom: 24px;\n  opacity: 0.6;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n  &:hover {\n    opacity: 1;\n  }\n`;\nexport const Wrapper = styled.div`\n  margin: 0 24px;\n`;\n","import { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useParams, Outlet, Link, useLocation } from 'react-router-dom';\nimport { getDetails } from 'services/APIService';\nimport { DetailsWrapper, Main, BackLink, Wrapper } from './MovieDetails.styled';\n\nconst MovieDetails = () => {\n  const [movie, setMovie] = useState(null);\n  const { movieId } = useParams();\n  const location = useLocation();\n\n  const result = [];\n  if (movie) {\n    movie.genres.map(genre => result.push(genre.name));\n  }\n\n  useEffect(() => {\n    getDetails(movieId).then(result => setMovie(result));\n  }, [movieId]);\n\n  const BackLinkHref = location.state?.from ?? '//movies';\n  return (\n    <Main>\n      <BackLink to={BackLinkHref}>Go back</BackLink>\n      {movie && (\n        <div>\n          <DetailsWrapper>\n            <img\n              src={`https://image.tmdb.org/t/p/w200/${movie.poster_path}`}\n              alt={movie.original_title}\n            />\n            <Wrapper>\n              <h1>{movie.original_title}</h1>\n              <p>User Score: {movie.vote_average.toFixed(2)}</p>\n              <h2>Overview </h2>\n              <p>{movie.overview}</p>\n              <h3>Genres</h3>\n              <p>{result.join(', ')}</p>\n            </Wrapper>\n          </DetailsWrapper>\n          <h3>Additional information</h3>\n          <ul>\n            <li>\n              <Link\n                to=\"cast\"\n                state={{ from: location.state?.from ?? '/movies' }}\n              >\n                Cast\n              </Link>\n            </li>\n            <li>\n              <Link\n                to=\"reviews\"\n                state={{ from: location.state?.from ?? '/movies' }}\n              >\n                Reviews{' '}\n              </Link>\n            </li>\n          </ul>\n\n          <Outlet />\n        </div>\n      )}\n    </Main>\n  );\n};\nexport default MovieDetails;\n\nMovieDetails.propTypes = {\n  movie: PropTypes.exact({\n    poster_path: PropTypes.string,\n    original_title: PropTypes.string.isRequired,\n    vote_average: PropTypes.string.isRequired,\n    overview: PropTypes.string.isRequired,\n  }),\n};\n"],"names":["DetailsWrapper","styled","Main","BackLink","NavLink","Wrapper","useState","movie","setMovie","movieId","useParams","location","useLocation","result","genres","map","genre","push","name","useEffect","getDetails","then","BackLinkHref","state","from","to","src","poster_path","alt","original_title","vote_average","toFixed","overview","join"],"sourceRoot":""}